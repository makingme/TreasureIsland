<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds">
	<!-- 환경변수 혹은 JVM 변수로 값 지정 가능 -->
	<property file="${LOG_PATH}/log.properties" />

	<timestamp key="timeStampTag" datePattern="yyyyMMdd_HHmmssSSS"/>
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{HH:mm:ss} [%thread] %-5level [%logger] - %msg%n	</pattern>
		</layout>
	</appender>
	
	<appender name="FILE" class="ch.qos.logback.core.FileAppender">
	    <file>${LOG_PATH}/file_${timeStampTag}.log</file>
	    <append>false</append>
    	<!-- set immediateFlush to false for much higher logging throughput -->
    	<immediateFlush>true</immediateFlush>
	    <encoder>
	      <pattern>%d{HH:mm:ss} [%thread] %-5level [%logger] - %msg%n	</pattern>
	    </encoder>
	</appender>
	<appender name="LOG_FILE" class="ch.qos.logback.core.FileAppender">
	    <file>${LOG_PATH}/${AGENT_NAME}.log</file>
	    <append>true</append>
	    <encoder>
	      <pattern>%d{HH:mm:ss} [%thread] %-5level [%logger] - %msg%n	</pattern>
	    </encoder>
	</appender>
	<!-- 파일 패턴에 따라 Rolling 기준이 결정 됨 -->
	<appender name="DAILY_YROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <file>${LOG_PATH}/${AGENT_NAME}.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>
			<maxHistory>30</maxHistory><!-- keep 30 days' worth of history capped at 3GB total size -->
			<totalSizeCap>3GB</totalSizeCap>
		</rollingPolicy>
	    <encoder>
	      <pattern>%d{HH:mm:ss} [%thread] %-5level [%logger] - %msg%n	</pattern>
	    </encoder>
	</appender>
	<appender name="HOURLY_YROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <file>${LOG_PATH}/${AGENT_NAME}.log</file>
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
		    <fileNamePattern>logFile.%d{yyyy-MM-dd-HH}.log</fileNamePattern>
		    <maxHistory>30</maxHistory>
		</rollingPolicy>
	    <encoder>
	      <pattern>%d{HH:mm:ss} [%thread] %-5level [%logger] - %msg%n	</pattern>
	    </encoder>
	</appender>
		
 	<!-- additivity는 상위 logger 상속여부 -->
	<logger name="com.happy.world.log" level="${LOG_LEVEL}" additivity="true">
		<appender-ref ref="LOG_FILE" />
	</logger>
	
	<!-- log4jdbc 옵션 설정 -->
	<logger name="jdbc" level="OFF" additivity="false"/>
	
	<!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
	<logger name="jdbc.connection" level="INFO" additivity="false">
	</logger>
	
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="OFF" additivity="false">
	</logger>
	
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming" level="DEBUG" additivity="false">
	</logger>
	
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
	<logger name="jdbc.audit" level="OFF" additivity="false">
	</logger>
	
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="OFF" additivity="false">
	</logger>
	<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
	<logger name="jdbc.resultsettable" level="DEBUG">
	</logger>
	
	<root level="INFO">
		<appender-ref ref="STDOUT" />	
	</root>
</configuration>